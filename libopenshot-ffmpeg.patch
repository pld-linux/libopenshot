--- a/src/FFmpegReader.cpp~	2018-04-29 21:29:04.000000000 +0200
+++ b/src/FFmpegReader.cpp	2018-04-29 21:30:32.336155455 +0200
@@ -941,7 +941,7 @@ void FFmpegReader::ProcessAudioPacket(in
 	int data_size = 0;
 
 	// re-initialize buffer size (it gets changed in the avcodec_decode_audio2 method call)
-	int buf_size = AVCODEC_MAX_AUDIO_FRAME_SIZE + FF_INPUT_BUFFER_PADDING_SIZE;
+	int buf_size = AVCODEC_MAX_AUDIO_FRAME_SIZE + AV_INPUT_BUFFER_PADDING_SIZE;
 	#pragma omp critical (ProcessAudioPacket)
 	{
 	#if IS_FFMPEG_3_2
@@ -1046,7 +1046,7 @@ void FFmpegReader::ProcessAudioPacket(in
 
 
 	// Allocate audio buffer
-	int16_t *audio_buf = new int16_t[AVCODEC_MAX_AUDIO_FRAME_SIZE + FF_INPUT_BUFFER_PADDING_SIZE];
+	int16_t *audio_buf = new int16_t[AVCODEC_MAX_AUDIO_FRAME_SIZE + AV_INPUT_BUFFER_PADDING_SIZE];
 
 	ZmqLogger::Instance()->AppendDebugMethod("FFmpegReader::ProcessAudioPacket (ReSample)", "packet_samples", packet_samples, "info.channels", info.channels, "info.sample_rate", info.sample_rate, "aCodecCtx->sample_fmt", AV_GET_SAMPLE_FORMAT(aStream, aCodecCtx), "AV_SAMPLE_FMT_S16", AV_SAMPLE_FMT_S16, "", -1);
 
--- libopenshot-0.1.9/src/FFmpegWriter.cpp~	2018-04-29 22:11:22.000000000 +0200
+++ libopenshot-0.1.9/src/FFmpegWriter.cpp	2018-04-29 22:13:25.133795468 +0200
@@ -868,7 +868,7 @@ AVStream* FFmpegWriter::add_audio_stream
 
 	// some formats want stream headers to be separate
 	if (oc->oformat->flags & AVFMT_GLOBALHEADER)
-		c->flags |= CODEC_FLAG_GLOBAL_HEADER;
+		c->flags |= AV_CODEC_FLAG_GLOBAL_HEADER;
 
 	AV_COPY_PARAMS_FROM_CONTEXT(st, c);
 	ZmqLogger::Instance()->AppendDebugMethod("FFmpegWriter::add_audio_stream", "c->codec_id", c->codec_id, "c->bit_rate", c->bit_rate, "c->channels", c->channels, "c->sample_fmt", c->sample_fmt, "c->channel_layout", c->channel_layout, "c->sample_rate", c->sample_rate);
@@ -940,7 +940,7 @@ AVStream* FFmpegWriter::add_video_stream
 		c->mb_decision = 2;
 	// some formats want stream headers to be separate
 	if (oc->oformat->flags & AVFMT_GLOBALHEADER)
-		c->flags |= CODEC_FLAG_GLOBAL_HEADER;
+		c->flags |= AV_CODEC_FLAG_GLOBAL_HEADER;
 
 	// Find all supported pixel formats for this codec
     const PixelFormat* supported_pixel_formats = codec->pix_fmts;
--- libopenshot-0.1.9/src/FFmpegWriter.cpp~	2018-04-29 22:18:37.000000000 +0200
+++ libopenshot-0.1.9/src/FFmpegWriter.cpp	2018-04-29 22:20:24.006338376 +0200
@@ -544,8 +544,6 @@ void FFmpegWriter::flush_encoders()
 {
 	if (info.has_audio && audio_codec && AV_GET_CODEC_TYPE(audio_st) == AVMEDIA_TYPE_AUDIO && AV_GET_CODEC_ATTRIBUTES(audio_st, audio_codec)->frame_size <= 1)
 		return;
-	if (info.has_video && video_codec && AV_GET_CODEC_TYPE(video_st) == AVMEDIA_TYPE_VIDEO && (oc->oformat->flags & AVFMT_RAWPICTURE) && AV_FIND_DECODER_CODEC_ID(video_st) == AV_CODEC_ID_RAWVIDEO)
-		return;
 
     int error_code = 0;
     int stop_encoding = 1;
@@ -955,10 +953,6 @@ AVStream* FFmpegWriter::add_video_stream
             // Raw video should use RGB24
         	c->pix_fmt = PIX_FMT_RGB24;
 
-        if (strcmp(fmt->name, "gif") != 0)
-			// If not GIF format, skip the encoding process
-			// Set raw picture flag (so we don't encode this video)
-			oc->oformat->flags |= AVFMT_RAWPICTURE;
         } else {
         	// Set the default codec
         	c->pix_fmt = PIX_FMT_YUV420P;
@@ -966,7 +960,7 @@ AVStream* FFmpegWriter::add_video_stream
     }
 
 	AV_COPY_PARAMS_FROM_CONTEXT(st, c);
-	ZmqLogger::Instance()->AppendDebugMethod("FFmpegWriter::add_video_stream (" + (string)fmt->name + " : " + (string)av_get_pix_fmt_name(c->pix_fmt) + ")", "c->codec_id", c->codec_id, "c->bit_rate", c->bit_rate, "c->pix_fmt", c->pix_fmt, "oc->oformat->flags", oc->oformat->flags, "AVFMT_RAWPICTURE", AVFMT_RAWPICTURE, "", -1);
+	ZmqLogger::Instance()->AppendDebugMethod("FFmpegWriter::add_video_stream (" + (string)fmt->name + " : " + (string)av_get_pix_fmt_name(c->pix_fmt) + ")", "c->codec_id", c->codec_id, "c->bit_rate", c->bit_rate, "c->pix_fmt", c->pix_fmt, "oc->oformat->flags", oc->oformat->flags, "", -1, "", -1);
 
 	return st;
 }
@@ -1519,34 +1513,7 @@ void FFmpegWriter::process_video_packet(
 // write video frame
 bool FFmpegWriter::write_video_packet(std::shared_ptr<Frame> frame, AVFrame* frame_final)
 {
-	ZmqLogger::Instance()->AppendDebugMethod("FFmpegWriter::write_video_packet", "frame->number", frame->number, "oc->oformat->flags & AVFMT_RAWPICTURE", oc->oformat->flags & AVFMT_RAWPICTURE, "", -1, "", -1, "", -1, "", -1);
-
-	if (oc->oformat->flags & AVFMT_RAWPICTURE) {
-		// Raw video case.
-		AVPacket pkt;
-		av_init_packet(&pkt);
-
-		pkt.flags |= AV_PKT_FLAG_KEY;
-		pkt.stream_index= video_st->index;
-		pkt.data= (uint8_t*)frame_final->data;
-		pkt.size= sizeof(AVPicture);
-
-		// Increment PTS (in frames and scaled to the codec's timebase)
-		write_video_count += av_rescale_q(1, (AVRational){info.fps.den, info.fps.num}, video_codec->time_base);
-		pkt.pts = write_video_count;
-
-		/* write the compressed frame in the media file */
-		int error_code = av_interleaved_write_frame(oc, &pkt);
-		if (error_code < 0)
-		{
-			ZmqLogger::Instance()->AppendDebugMethod("FFmpegWriter::write_video_packet ERROR [" + (string)av_err2str(error_code) + "]", "error_code", error_code, "", -1, "", -1, "", -1, "", -1, "", -1);
-			return false;
-		}
-
-		// Deallocate packet
-		AV_FREE_PACKET(&pkt);
-
-	} else {
+	ZmqLogger::Instance()->AppendDebugMethod("FFmpegWriter::write_video_packet", "frame->number", frame->number, "", -1, "", -1, "", -1, "", -1, "", -1);
 
 		AVPacket pkt;
 		av_init_packet(&pkt);
@@ -1653,7 +1620,6 @@ bool FFmpegWriter::write_video_packet(st
 
 		// Deallocate packet
 		AV_FREE_PACKET(&pkt);
-	}
 
 	// Success
 	return true;

--- libopenshot-0.1.9/src/FFmpegWriter.cpp~	2018-04-29 22:20:42.000000000 +0200
+++ libopenshot-0.1.9/src/FFmpegWriter.cpp	2018-04-29 22:22:06.796083026 +0200
@@ -1022,7 +1022,7 @@ void FFmpegWriter::open_audio(AVFormatCo
 	audio_encoder_buffer_size = AUDIO_PACKET_ENCODING_SIZE;
 	audio_encoder_buffer = new uint8_t[audio_encoder_buffer_size];
 
-	ZmqLogger::Instance()->AppendDebugMethod("FFmpegWriter::open_audio", "audio_codec->thread_count", audio_codec->thread_count, "audio_input_frame_size", audio_input_frame_size, "buffer_size", AVCODEC_MAX_AUDIO_FRAME_SIZE + FF_INPUT_BUFFER_PADDING_SIZE, "", -1, "", -1, "", -1);
+	ZmqLogger::Instance()->AppendDebugMethod("FFmpegWriter::open_audio", "audio_codec->thread_count", audio_codec->thread_count, "audio_input_frame_size", audio_input_frame_size, "buffer_size", AVCODEC_MAX_AUDIO_FRAME_SIZE + AV_INPUT_BUFFER_PADDING_SIZE, "", -1, "", -1, "", -1);
 
 }
 
